-- MySQL Script generated by MySQL Workbench
-- Wed Jan 23 13:41:35 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema TP_DEVIS
-- -----------------------------------------------------
-- AFPA 2019
DROP SCHEMA IF EXISTS `TP_DEVIS` ;

-- -----------------------------------------------------
-- Schema TP_DEVIS
--
-- AFPA 2019
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `TP_DEVIS` DEFAULT CHARACTER SET utf8 ;
USE `TP_DEVIS` ;

-- -----------------------------------------------------
-- Table `pays`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pays` (
  `id_pays` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `code_pays` CHAR(5) NOT NULL,
  `libelle` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_pays`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `code_pays_UNIQUE` ON `pays` (`code_pays` ASC) ;


-- -----------------------------------------------------
-- Table `adresse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `adresse` (
  `id_adresse` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ligne1` VARCHAR(45) NOT NULL,
  `ligne2` VARCHAR(45) NULL,
  `code_postal` VARCHAR(10) NOT NULL,
  `ville` VARCHAR(45) NOT NULL,
  `pays_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_adresse`),
  CONSTRAINT `fk_adresse_pays`
    FOREIGN KEY (`pays_id`)
    REFERENCES `pays` (`id_pays`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_adresse_pays_idx` ON `adresse` (`pays_id` ASC) ;


-- -----------------------------------------------------
-- Table `entreprise`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `entreprise` (
  `id_entreprise` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `siret` CHAR(14) NOT NULL,
  `raison_sociale` VARCHAR(255) NOT NULL,
  `num_tva` CHAR(13) NOT NULL,
  `tel` VARCHAR(45) NULL,
  `fax` VARCHAR(45) NULL,
  `adresse_entreprise_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_entreprise`),
  CONSTRAINT `fk_entreprise_adresse`
    FOREIGN KEY (`adresse_entreprise_id`)
    REFERENCES `adresse` (`id_adresse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_entreprise_adresse_idx` ON `entreprise` (`adresse_entreprise_id` ASC) ;

CREATE UNIQUE INDEX `siret_UNIQUE` ON `entreprise` (`siret` ASC) ;

CREATE UNIQUE INDEX `adresse_entreprise_UNIQUE` ON `entreprise` (`adresse_entreprise_id` ASC) ;


-- -----------------------------------------------------
-- Table `client`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client` (
  `id_client` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `libelle` VARCHAR(45) NOT NULL,
  `adresse_admin_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_client`),
  CONSTRAINT `fk_client_adresse`
    FOREIGN KEY (`adresse_admin_id`)
    REFERENCES `adresse` (`id_adresse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_client_adresse_idx` ON `client` (`adresse_admin_id` ASC) ;


-- -----------------------------------------------------
-- Table `client_interlocuteur`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `client_interlocuteur` (
  `id_client_interlocuteur` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `civilite` ENUM("Mr.", "Ms.") NOT NULL,
  `nom` VARCHAR(45) NOT NULL,
  `prenom` VARCHAR(45) NOT NULL,
  `tel` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `client_id` INT UNSIGNED NOT NULL,
  `adresse_livraison_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_client_interlocuteur`),
  CONSTRAINT `fk_client_interlocuteur_client`
    FOREIGN KEY (`client_id`)
    REFERENCES `client` (`id_client`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_client_interlocuteur_adresse`
    FOREIGN KEY (`adresse_livraison_id`)
    REFERENCES `adresse` (`id_adresse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_client_interlocuteur_client_idx` ON `client_interlocuteur` (`client_id` ASC) ;

CREATE INDEX `fk_client_interlocuteur_adresse_idx` ON `client_interlocuteur` (`adresse_livraison_id` ASC) ;


-- -----------------------------------------------------
-- Table `type_livraison`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `type_livraison` (
  `id_type_livraison` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `libelle` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_type_livraison`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `entreprise_contact`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `entreprise_contact` (
  `id_entreprise_contact` INT UNSIGNED NOT NULL,
  `entreprise_id` INT UNSIGNED NOT NULL,
  `civilite` ENUM("Mr.", "Ms.") NOT NULL,
  `nom` VARCHAR(45) NOT NULL,
  `prenom` VARCHAR(45) NOT NULL,
  `tel` VARCHAR(45) NULL,
  `fax` VARCHAR(45) NULL,
  `email` VARCHAR(45) NULL,
  PRIMARY KEY (`id_entreprise_contact`, `entreprise_id`),
  CONSTRAINT `fk_entreprise_contact_entreprise`
    FOREIGN KEY (`entreprise_id`)
    REFERENCES `entreprise` (`id_entreprise`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_entreprise_contact_entreprise_idx` ON `entreprise_contact` (`entreprise_id` ASC) ;


-- -----------------------------------------------------
-- Table `delai_paiement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `delai_paiement` (
  `id_delai_paiement` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `code_delai_paiement` CHAR(5) NOT NULL,
  `libelle` VARCHAR(45) NOT NULL,
  `delai_jours` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_delai_paiement`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `code_delai_paiement_UNIQUE` ON `delai_paiement` (`code_delai_paiement` ASC) ;


-- -----------------------------------------------------
-- Table `statut_facture`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `statut_facture` (
  `id_statut_facture` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `libelle` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_statut_facture`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mode_paiement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mode_paiement` (
  `id_mode_paiement` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `libelle` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_mode_paiement`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `facture`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `facture` (
  `id_facture` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `date_facturation` DATE NULL,
  `delai_paiement_id` INT UNSIGNED NOT NULL,
  `date_paiement` DATE NULL,
  `total_ht` DECIMAL(10,2) NULL,
  `taux_tva_100` DECIMAL(5,2) NOT NULL,
  `total_ttc` DECIMAL(10,2) NULL,
  `statut_facture_id` INT UNSIGNED NOT NULL,
  `mode_paiement_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_facture`),
  CONSTRAINT `fk_facture_delai_paiement`
    FOREIGN KEY (`delai_paiement_id`)
    REFERENCES `delai_paiement` (`id_delai_paiement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_facture_statut_facture`
    FOREIGN KEY (`statut_facture_id`)
    REFERENCES `statut_facture` (`id_statut_facture`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_facture_mode_paiement`
    FOREIGN KEY (`mode_paiement_id`)
    REFERENCES `mode_paiement` (`id_mode_paiement`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_facture_delai_paiement_idx` ON `facture` (`delai_paiement_id` ASC) ;

CREATE INDEX `fk_facture_statut_facture_idx` ON `facture` (`statut_facture_id` ASC) ;

CREATE INDEX `fk_facture_mode_paiement_idx` ON `facture` (`mode_paiement_id` ASC) ;


-- -----------------------------------------------------
-- Table `devis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `devis` (
  `id_devis` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `num_devis` CHAR(10) NOT NULL,
  `date_devis` DATE NOT NULL,
  `date_fin_validite` DATE NULL,
  `commentaire` TEXT NULL,
  `client_interlocuteur_id` INT UNSIGNED NOT NULL,
  `type_livraison_id` INT UNSIGNED NOT NULL,
  `entreprise_contact_id` INT UNSIGNED NOT NULL,
  `entreprise_id` INT UNSIGNED NOT NULL,
  `facture_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_devis`),
  CONSTRAINT `fk_devis_client_interlocuteur`
    FOREIGN KEY (`client_interlocuteur_id`)
    REFERENCES `client_interlocuteur` (`id_client_interlocuteur`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_devis_type_livraison`
    FOREIGN KEY (`type_livraison_id`)
    REFERENCES `type_livraison` (`id_type_livraison`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_devis_entreprise_contact`
    FOREIGN KEY (`entreprise_contact_id` , `entreprise_id`)
    REFERENCES `entreprise_contact` (`id_entreprise_contact` , `entreprise_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_devis_facture`
    FOREIGN KEY (`facture_id`)
    REFERENCES `facture` (`id_facture`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_devis_client_interlocuteur_idx` ON `devis` (`client_interlocuteur_id` ASC) ;

CREATE INDEX `fk_devis_type_livraison_idx` ON `devis` (`type_livraison_id` ASC) ;

CREATE INDEX `fk_devis_facture_idx` ON `devis` (`facture_id` ASC) ;

CREATE UNIQUE INDEX `facture_id__UNIQUE` ON `devis` (`facture_id` ASC) ;

CREATE UNIQUE INDEX `num_devis_UNIQUE` ON `devis` (`num_devis` ASC) ;

CREATE INDEX `fk_devis_entreprise_contact_idx` ON `devis` (`entreprise_contact_id` ASC, `entreprise_id` ASC) ;


-- -----------------------------------------------------
-- Table `marque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `marque` (
  `id_marque` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `libelle` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_marque`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `categorie`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `categorie` (
  `id_categorie` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `libelle` VARCHAR(45) NOT NULL,
  `categorie_parente_id` INT UNSIGNED NULL,
  PRIMARY KEY (`id_categorie`),
  CONSTRAINT `fk_categorie_categorie`
    FOREIGN KEY (`categorie_parente_id`)
    REFERENCES `categorie` (`id_categorie`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_categorie_categorie_idx` ON `categorie` (`categorie_parente_id` ASC) ;


-- -----------------------------------------------------
-- Table `modele`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `modele` (
  `id_modele` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `reference` VARCHAR(45) NOT NULL,
  `descriptif` TEXT NOT NULL,
  `prix_unitaire_ht` DECIMAL(10,2) NOT NULL,
  `marque_id` INT UNSIGNED NOT NULL,
  `categorie_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_modele`),
  CONSTRAINT `fk_modele_marque`
    FOREIGN KEY (`marque_id`)
    REFERENCES `marque` (`id_marque`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_modele_categorie`
    FOREIGN KEY (`categorie_id`)
    REFERENCES `categorie` (`id_categorie`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_modele_marque_idx` ON `modele` (`marque_id` ASC) ;

CREATE INDEX `fk_modele_categorie_idx` ON `modele` (`categorie_id` ASC) ;


-- -----------------------------------------------------
-- Table `ligne_commande`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ligne_commande` (
  `devis_id` INT UNSIGNED NOT NULL,
  `modele_id` INT UNSIGNED NOT NULL,
  `quantite` INT NOT NULL,
  `montant_ht` DECIMAL(10,2) NULL,
  PRIMARY KEY (`devis_id`, `modele_id`),
  CONSTRAINT `fk_ligne_commande_devis`
    FOREIGN KEY (`devis_id`)
    REFERENCES `devis` (`id_devis`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ligne_commande_modele`
    FOREIGN KEY (`modele_id`)
    REFERENCES `modele` (`id_modele`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_ligne_commande_devis_idx` ON `ligne_commande` (`devis_id` ASC) ;

CREATE INDEX `fk_ligne_commande_modele_idx` ON `ligne_commande` (`modele_id` ASC) ;


-- -----------------------------------------------------
-- Table `param`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `param` (
  `param_nature` VARCHAR(45) NOT NULL,
  `param_code` CHAR(5) NOT NULL,
  `param_libelle` VARCHAR(45) NULL,
  `id_param` INT NOT NULL,
  PRIMARY KEY (`param_nature`, `param_code`, `id_param`))
ENGINE = InnoDB;

USE `TP_DEVIS` ;

-- -----------------------------------------------------
-- Placeholder table for view `v_devis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `v_devis` (`entreprise` INT, `entreprise_contact_nom` INT, `num_devis` INT, `total_ht` INT, `taux_tva_100` INT, `total_ttc` INT);

-- -----------------------------------------------------
-- procedure calculer_ligne_commande_montant_ht
-- -----------------------------------------------------

DELIMITER $$
USE `TP_DEVIS`$$
CREATE PROCEDURE calculer_ligne_commande_montant_ht (IN p_id_devis INT)
BEGIN

	UPDATE ligne_commande
	inner JOIN modele
	ON modele.id_modele = ligne_commande.modele_id
	and ligne_commande.devis_id = p_id_devis
	SET ligne_commande.montant_ht = ligne_commande.quantite * modele.prix_unitaire_ht;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure calculer_facture_total_ht
-- -----------------------------------------------------

DELIMITER $$
USE `TP_DEVIS`$$
CREATE PROCEDURE calculer_facture_total_ht ( IN p_id_devis INT )
BEGIN
		
	call calculer_ligne_commande_montant_ht (p_id_devis);
	
	update facture
    inner join devis
    on devis.facture_id = facture.id_facture
	set facture.total_ht = 
	(
		select sum(ligne_commande.montant_ht)
		from ligne_commande
		inner join devis
		on devis.id_devis = ligne_commande.devis_id
		where  facture.id_facture = devis.facture_id
	) where devis.id_devis = p_id_devis;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `v_devis`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `v_devis`;
USE `TP_DEVIS`;
CREATE  OR REPLACE VIEW v_devis
AS SELECT 
entreprise.raison_sociale as entreprise, 
entreprise_contact.nom as entreprise_contact_nom, 
devis.num_devis, 
facture.total_ht,
facture.taux_tva_100,
(facture.total_ht + facture.total_ht * facture.taux_tva_100/100) as total_ttc
from entreprise
inner join entreprise_contact
on entreprise_contact.entreprise_id = entreprise.id_entreprise
inner join devis
on devis.entreprise_id = entreprise_contact.entreprise_id AND devis.entreprise_contact_id = entreprise_contact.id_entreprise_contact
inner join facture
on facture.id_facture = devis.facture_id;
USE `TP_DEVIS`;

DELIMITER $$
USE `TP_DEVIS`$$
CREATE TRIGGER entreprise_contact_BEFORE_INSERT  BEFORE INSERT ON entreprise_contact  FOR EACH ROW 
BEGIN 

	DECLARE num INTEGER; 
  
	IF ( NEW.id_entreprise_contact IS NULL OR NEW.id_entreprise_contact = 0 ) THEN 
		
		SET num =  
		( 
			SELECT COALESCE ( MAX( id_entreprise_contact ),  0 )  +  1 
			FROM entreprise_contact 
			WHERE entreprise_id = NEW.entreprise_id 
		); 

		SET NEW.id_entreprise_contact = num; 
	  
	END IF; 
  
  END$$

USE `TP_DEVIS`$$
CREATE TRIGGER ligne_commande_BEFORE_INSERT BEFORE INSERT ON ligne_commande FOR EACH ROW
BEGIN

	IF ( NEW.montant_ht IS NULL OR NEW.montant_ht = 0 ) THEN 

    SET NEW.montant_ht = NEW.quantite * 
    (
   		select modele.prix_unitaire_ht 
   		from modele  
   		where modele.id_modele = NEW.modele_id
   	);
    
    END IF;

END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
